/**
 * Generated by orval v7.1.0 üç∫
 * Do not edit manually.
 * Sonic SVM ZkBridge API
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  BridgeControllerQueryParams,
  MintOnBridgeDto,
  MintOnBridgeResponseDto,
} from "./models";

export const bridgeControllerMintOnBridge = (
  mintOnBridgeDto: MintOnBridgeDto,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<MintOnBridgeResponseDto>> => {
  return axios.default.post(`/api/bridge/mint`, mintOnBridgeDto, options);
};

export const getBridgeControllerMintOnBridgeMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bridgeControllerMintOnBridge>>,
    TError,
    { data: MintOnBridgeDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof bridgeControllerMintOnBridge>>,
  TError,
  { data: MintOnBridgeDto },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof bridgeControllerMintOnBridge>>,
    { data: MintOnBridgeDto }
  > = (props) => {
    const { data } = props ?? {};

    return bridgeControllerMintOnBridge(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type BridgeControllerMintOnBridgeMutationResult = NonNullable<
  Awaited<ReturnType<typeof bridgeControllerMintOnBridge>>
>;
export type BridgeControllerMintOnBridgeMutationBody = MintOnBridgeDto;
export type BridgeControllerMintOnBridgeMutationError = AxiosError<unknown>;

export const useBridgeControllerMintOnBridge = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof bridgeControllerMintOnBridge>>,
    TError,
    { data: MintOnBridgeDto },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof bridgeControllerMintOnBridge>>,
  TError,
  { data: MintOnBridgeDto },
  TContext
> => {
  const mutationOptions =
    getBridgeControllerMintOnBridgeMutationOptions(options);

  return useMutation(mutationOptions);
};

export const bridgeControllerQuery = (
  params: BridgeControllerQueryParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<MintOnBridgeResponseDto[]>> => {
  return axios.default.get(`/api/bridge/history`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getBridgeControllerQueryQueryKey = (
  params: BridgeControllerQueryParams,
) => {
  return [`/api/bridge/history`, ...(params ? [params] : [])] as const;
};

export const getBridgeControllerQueryQueryOptions = <
  TData = Awaited<ReturnType<typeof bridgeControllerQuery>>,
  TError = AxiosError<unknown>,
>(
  params: BridgeControllerQueryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bridgeControllerQuery>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBridgeControllerQueryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof bridgeControllerQuery>>
  > = ({ signal }) =>
    bridgeControllerQuery(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof bridgeControllerQuery>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type BridgeControllerQueryQueryResult = NonNullable<
  Awaited<ReturnType<typeof bridgeControllerQuery>>
>;
export type BridgeControllerQueryQueryError = AxiosError<unknown>;

export function useBridgeControllerQuery<
  TData = Awaited<ReturnType<typeof bridgeControllerQuery>>,
  TError = AxiosError<unknown>,
>(
  params: BridgeControllerQueryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bridgeControllerQuery>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof bridgeControllerQuery>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useBridgeControllerQuery<
  TData = Awaited<ReturnType<typeof bridgeControllerQuery>>,
  TError = AxiosError<unknown>,
>(
  params: BridgeControllerQueryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bridgeControllerQuery>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof bridgeControllerQuery>>,
          TError,
          TData
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useBridgeControllerQuery<
  TData = Awaited<ReturnType<typeof bridgeControllerQuery>>,
  TError = AxiosError<unknown>,
>(
  params: BridgeControllerQueryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bridgeControllerQuery>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useBridgeControllerQuery<
  TData = Awaited<ReturnType<typeof bridgeControllerQuery>>,
  TError = AxiosError<unknown>,
>(
  params: BridgeControllerQueryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof bridgeControllerQuery>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getBridgeControllerQueryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
